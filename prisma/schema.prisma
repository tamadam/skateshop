// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String   @unique
  password  String
  role      ROLES    @default(USER)
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Billboard {
  id         String     @id @default(uuid())
  label      String
  imageUrl   String?
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Category {
  id               String     @id @default(uuid())
  name             String
  parentCategoryId String?
  parentCategory   Category?  @relation("subCategory", fields: [parentCategoryId], references: [id])
  subCategory      Category[] @relation("subCategory")
  billboardId      String
  billboard        Billboard  @relation(fields: [billboardId], references: [id])
  products         Product[]
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model Product {
  id          String      @id @default(uuid())
  name        String
  price       Decimal
  categoryId  String
  category    Category    @relation(fields: [categoryId], references: [id])
  brandId     String
  brand       Brand       @relation(fields: [brandId], references: [id])
  sizeId      String
  size        Size        @relation(fields: [sizeId], references: [id])
  colorId     String?
  color       Color?      @relation(fields: [colorId], references: [id])
  images      Image[]
  gender      GENDERS
  quantity    Int
  description String      @db.VarChar(150)
  isFeatured  Boolean
  isArchived  Boolean
  orderItem   OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Image {
  id        String   @id @default(uuid())
  url       String
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Color {
  id        String    @id @default(uuid())
  name      String
  value     String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Size {
  id        String    @id @default(uuid())
  name      String
  value     String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Brand {
  id        String    @id @default(uuid())
  name      String
  imageUrl  String?
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Order {
  id         String      @id @default(uuid())
  userId     Int?
  user       User?       @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
  phone      String      @default("")
  address    String      @default("")
  isPaid     Boolean
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

enum ROLES {
  USER
  ADMIN
}

enum GENDERS {
  MALE
  FEMALE
  UNISEX
}
